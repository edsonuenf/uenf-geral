{"version":3,"file":"js/shortcut-panel.min.js","mappings":"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","sources":["webpack:///./js/components/shortcut-panel.js"],"sourcesContent":["/**\n * Painel de Atalhos - Componente ES6\n * Componente de navegação rápida para o site da UENF\n * \n * @module ShortcutPanel\n * @version 2.0.0\n */\n\nexport class ShortcutPanel {\n    /**\n     * Inicializa o painel de atalhos\n     * @param {Object} options - Opções de configuração\n     */\n    constructor(options = {}) {\n        // Configurações padrão\n        this.settings = {\n            containerSelector: '#uenf-shortcut-panel-container',\n            panelSelector: '.shortcut-panel',\n            iconSelector: '.shortcut-icon',\n            closeButtonSelector: '.close-panel',\n            activeClass: 'active',\n            animationDuration: 300,\n            enableSmoothScroll: true,\n            ...options\n        };\n        \n        // Elementos do DOM\n        this.container = null;\n        this.panel = null;\n        this.icon = null;\n        this.closeButton = null;\n        this.isOpen = false;\n        \n        // Bind de métodos\n        this.toggle = this.toggle.bind(this);\n        this.open = this.open.bind(this);\n        this.close = this.close.bind(this);\n        this.handleClickOutside = this.handleClickOutside.bind(this);\n        this.handleResize = this.handleResize.bind(this);\n        this.handleKeyDown = this.handleKeyDown.bind(this);\n        \n        // Inicializa quando o DOM estiver pronto\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.init());\n        } else {\n            this.init();\n        }\n    }\n    \n    /**\n     * Inicializa o componente\n     */\n    init() {\n        // Encontra os elementos no DOM\n        this.container = document.querySelector(this.settings.containerSelector);\n        \n        if (!this.container) {\n            console.warn(`Elemento container não encontrado com o seletor: ${this.settings.containerSelector}`);\n            return;\n        }\n        \n        this.panel = this.container.querySelector(this.settings.panelSelector);\n        this.icon = this.container.querySelector(this.settings.iconSelector);\n        this.closeButton = this.container.querySelector(this.settings.closeButtonSelector);\n        \n        // Verifica se os elementos necessários existem\n        if (!this.panel || !this.icon) {\n            console.warn('Elementos do painel de atalhos não encontrados.');\n            return;\n        }\n        \n        // Garante que o container esteja no final do body\n        this.moveContainerToBody();\n        \n        // Adiciona eventos\n        this.addEventListeners();\n        \n        // Inicializa o estado do painel\n        this.panel.style.transition = `transform ${this.settings.animationDuration}ms ease-in-out`;\n        this.close(); // Fecha o painel por padrão\n    }\n    \n    /**\n     * Move o container para o final do body se necessário\n     */\n    moveContainerToBody() {\n        if (this.container.parentNode !== document.body) {\n            document.body.appendChild(this.container);\n        }\n    }\n    \n    /**\n     * Adiciona os listeners de eventos\n     */\n    addEventListeners() {\n        // Toggle no clique do ícone\n        if (this.icon) {\n            this.icon.addEventListener('click', this.toggle);\n        }\n        \n        // Fecha ao clicar no botão de fechar\n        if (this.closeButton) {\n            this.closeButton.addEventListener('click', this.close);\n        }\n        \n        // Fecha ao clicar fora do painel\n        document.addEventListener('click', this.handleClickOutside);\n        \n        // Fecha ao pressionar a tecla ESC\n        document.addEventListener('keydown', this.handleKeyDown);\n        \n        // Ajusta o layout em redimensionamentos\n        window.addEventListener('resize', this.handleResize);\n    }\n    \n    /**\n     * Alterna o estado do painel (aberto/fechado)\n     */\n    toggle() {\n        if (this.isOpen) {\n            this.close();\n        } else {\n            this.open();\n        }\n    }\n    \n    /**\n     * Abre o painel\n     */\n    open() {\n        this.isOpen = true;\n        this.container.classList.add(this.settings.activeClass);\n        this.panel.style.transform = 'translateX(0)';\n        \n        // Dispara evento personalizado\n        this.dispatchEvent('shortcutPanel:opened');\n    }\n    \n    /**\n     * Fecha o painel\n     */\n    close() {\n        this.isOpen = false;\n        this.container.classList.remove(this.settings.activeClass);\n        this.panel.style.transform = 'translateX(100%)';\n        \n        // Dispara evento personalizado\n        this.dispatchEvent('shortcutPanel:closed');\n    }\n    \n    /**\n     * Manipula o clique fora do painel\n     * @param {Event} event - Objeto de evento\n     */\n    handleClickOutside(event) {\n        if (!this.isOpen) return;\n        \n        const isClickInside = this.container.contains(event.target) || \n                            (this.icon && this.icon.contains(event.target));\n        \n        if (!isClickInside) {\n            this.close();\n        }\n    }\n    \n    /**\n     * Manipula o redimensionamento da janela\n     */\n    handleResize() {\n        // Fecha o painel em telas pequenas quando redimensionado para uma largura maior\n        if (window.innerWidth >= 992 && this.isOpen) {\n            this.close();\n        }\n    }\n    \n    /**\n     * Manipula o pressionamento de teclas\n     * @param {KeyboardEvent} event - Objeto de evento de teclado\n     */\n    handleKeyDown(event) {\n        // Fecha ao pressionar ESC\n        if (event.key === 'Escape' && this.isOpen) {\n            this.close();\n        }\n    }\n    \n    /**\n     * Dispara um evento personalizado\n     * @param {string} eventName - Nome do evento\n     * @param {Object} detail - Dados adicionais do evento\n     */\n    dispatchEvent(eventName, detail = {}) {\n        const event = new CustomEvent(eventName, {\n            bubbles: true,\n            detail: {\n                target: this.container,\n                ...detail\n            }\n        });\n        \n        this.container.dispatchEvent(event);\n    }\n    \n    /**\n     * Remove todos os listeners e limpa recursos\n     */\n    destroy() {\n        // Remove event listeners\n        if (this.icon) {\n            this.icon.removeEventListener('click', this.toggle);\n        }\n        \n        if (this.closeButton) {\n            this.closeButton.removeEventListener('click', this.close);\n        }\n        \n        document.removeEventListener('click', this.handleClickOutside);\n        document.removeEventListener('keydown', this.handleKeyDown);\n        window.removeEventListener('resize', this.handleResize);\n    }\n}\n\n// Inicializa automaticamente se o módulo for carregado diretamente no navegador\nif (typeof window !== 'undefined') {\n    window.ShortcutPanel = ShortcutPanel;\n    \n    // Inicializa automaticamente quando o DOM estiver pronto\n    document.addEventListener('DOMContentLoaded', () => {\n        new ShortcutPanel();\n    });\n}\n\nexport default ShortcutPanel;\n"],"names":["ShortcutPanel","constructor","options","this","settings","containerSelector","panelSelector","iconSelector","closeButtonSelector","activeClass","animationDuration","enableSmoothScroll","container","panel","icon","closeButton","isOpen","toggle","bind","open","close","handleClickOutside","handleResize","handleKeyDown","document","readyState","addEventListener","init","querySelector","moveContainerToBody","addEventListeners","style","transition","console","warn","parentNode","body","appendChild","window","classList","add","transform","dispatchEvent","remove","event","contains","target","innerWidth","key","eventName","detail","CustomEvent","bubbles","destroy","removeEventListener"],"sourceRoot":""}