{"version":3,"file":"js/form-validator.min.js","mappings":"mBAQO,MAAMA,EAKTC,WAAAA,CAAYC,EAAU,CAAC,GACnBC,KAAKC,SAAW,CACZC,aAAc,qBACdC,WAAY,aACZC,WAAY,WACZC,aAAc,SACXN,GAGPC,KAAKM,MAAQ,GAGe,YAAxBC,SAASC,WACTD,SAASE,iBAAiB,mBAAoB,IAAMT,KAAKU,QAEzDV,KAAKU,MAEb,CAKAA,IAAAA,GACI,MAAMJ,EAAQC,SAASI,iBAAiBX,KAAKC,SAASC,cAEjDI,EAAMM,OAMXN,EAAMO,QAAQC,IACVd,KAAKe,mBAAmBD,KANxBE,QAAQC,KAAK,8CAA+CjB,KAAKC,SAASC,aAQlF,CAMAa,kBAAAA,CAAmBD,GAEf,GAAsB,oBAAXI,SAA2BA,OAAOC,GAAGC,SAE5C,YADAJ,QAAQC,KAAK,uFAIjB,MAAMI,EAAQH,OAAOJ,GAGrBO,EAAMD,SAAS,CACXjB,WAAYH,KAAKC,SAASE,WAC1BC,WAAYJ,KAAKC,SAASG,WAC1BC,aAAcL,KAAKC,SAASI,aAE5BiB,eAAgBA,CAACC,EAAOC,KACpB,MAAMC,EAASP,OAAOM,GAASE,QAAQ,4CACnCD,EAAOb,OACPa,EAAOE,OAAOJ,GAEdL,OAAOM,GAASI,MAAML,IAI9BM,UAAWA,CAACL,EAASrB,EAAYC,KAC7B,MAAM0B,EAAWZ,OAAOM,GACxBM,EAASC,SAAS5B,GAAY6B,YAAY5B,GAC1C0B,EAASJ,QAAQ,4CAA4CK,SAAS,cAG1EE,YAAaA,CAACT,EAASrB,EAAYC,KAC/B,MAAM0B,EAAWZ,OAAOM,GACxBM,EAASE,YAAY7B,GAAY4B,SAAS3B,GAC1C0B,EAASJ,QAAQ,4CAA4CM,YAAY,cAG7EE,cAAgBpB,IACZd,KAAKmC,iBAAiBrB,MAK9Bd,KAAKoC,wBAAwBf,GAG7BrB,KAAKM,MAAM+B,KAAKhB,EACpB,CAMAe,uBAAAA,CAAwBf,GACpBA,EAAMiB,GAAG,eAAgB,0BAA2B,WAEhDjB,EAAMD,WAAWI,QAAQxB,KAC7B,EACJ,CAMAmC,gBAAAA,CAAiBrB,GACb,MACMyB,EADQrB,OAAOJ,GACO0B,KAAK,+CAC3BC,EAAeF,EAAcG,OAGnCH,EAAcI,KAAK,YAAY,GAAMD,KAAK,uGAI1C5B,EAAK8B,SAGLC,WAAW,KACPN,EAAcI,KAAK,YAAY,GAAOD,KAAKD,IAC5C,IACP,EAIkB,oBAAXK,SACPA,OAAOjD,cAAgBA,EAGvBU,SAASE,iBAAiB,mBAAoB,KAC1C,IAAIZ,I","sources":["webpack:///./js/modules/form-validator.js"],"sourcesContent":["/**\n * Validação de formulários no lado do cliente\n * Módulo ES6 para validação de formulários\n * \n * @module FormValidator\n * @version 1.0.0\n */\n\nexport class FormValidator {\n    /**\n     * Inicializa o validador de formulários\n     * @param {Object} options - Opções de configuração\n     */\n    constructor(options = {}) {\n        this.settings = {\n            formSelector: 'form.uenf-validate',\n            errorClass: 'is-invalid',\n            validClass: 'is-valid',\n            errorElement: 'div',\n            ...options\n        };\n        \n        this.forms = [];\n        \n        // Inicializa quando o DOM estiver pronto\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.init());\n        } else {\n            this.init();\n        }\n    }\n    \n    /**\n     * Inicializa o validador para todos os formulários correspondentes\n     */\n    init() {\n        const forms = document.querySelectorAll(this.settings.formSelector);\n        \n        if (!forms.length) {\n            console.warn('Nenhum formulário encontrado com o seletor:', this.settings.formSelector);\n            return;\n        }\n        \n        // Inicializa a validação para cada formulário\n        forms.forEach(form => {\n            this.initFormValidation(form);\n        });\n    }\n    \n    /**\n     * Inicializa a validação para um formulário específico\n     * @param {HTMLElement} form - Elemento do formulário\n     */\n    initFormValidation(form) {\n        // Verifica se o jQuery Validation está disponível\n        if (typeof jQuery === 'undefined' || !jQuery.fn.validate) {\n            console.warn('jQuery Validation não está disponível. A validação de formulários não será ativada.');\n            return;\n        }\n        \n        const $form = jQuery(form);\n        \n        // Configuração do validador\n        $form.validate({\n            errorClass: this.settings.errorClass,\n            validClass: this.settings.validClass,\n            errorElement: this.settings.errorElement,\n            \n            errorPlacement: (error, element) => {\n                const $field = jQuery(element).closest('.form-group, .form-floating, .form-check');\n                if ($field.length) {\n                    $field.append(error);\n                } else {\n                    jQuery(element).after(error);\n                }\n            },\n            \n            highlight: (element, errorClass, validClass) => {\n                const $element = jQuery(element);\n                $element.addClass(errorClass).removeClass(validClass);\n                $element.closest('.form-group, .form-floating, .form-check').addClass('has-error');\n            },\n            \n            unhighlight: (element, errorClass, validClass) => {\n                const $element = jQuery(element);\n                $element.removeClass(errorClass).addClass(validClass);\n                $element.closest('.form-group, .form-floating, .form-check').removeClass('has-error');\n            },\n            \n            submitHandler: (form) => {\n                this.handleFormSubmit(form);\n            }\n        });\n        \n        // Configura validação em tempo real\n        this.setupRealTimeValidation($form);\n        \n        // Armazena referência ao formulário\n        this.forms.push($form);\n    }\n    \n    /**\n     * Configura a validação em tempo real\n     * @param {jQuery} $form - Objeto jQuery do formulário\n     */\n    setupRealTimeValidation($form) {\n        $form.on('keyup change', 'input, select, textarea', function() {\n            // Valida apenas o campo alterado\n            $form.validate().element(this);\n        });\n    }\n    \n    /**\n     * Manipula o envio do formulário\n     * @param {HTMLElement} form - Elemento do formulário\n     */\n    handleFormSubmit(form) {\n        const $form = jQuery(form);\n        const $submitButton = $form.find('button[type=\"submit\"], input[type=\"submit\"]');\n        const originalText = $submitButton.html();\n        \n        // Desabilita o botão de envio\n        $submitButton.prop('disabled', true).html('<span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Enviando...');\n        \n        // Aqui você pode adicionar lógica de envio AJAX se necessário\n        // Por enquanto, apenas envia o formulário normalmente\n        form.submit();\n        \n        // Reativa o botão após 5 segundos (caso haja algum erro)\n        setTimeout(() => {\n            $submitButton.prop('disabled', false).html(originalText);\n        }, 5000);\n    }\n}\n\n// Inicializa automaticamente se o módulo for carregado diretamente no navegador\nif (typeof window !== 'undefined') {\n    window.FormValidator = FormValidator;\n    \n    // Inicializa automaticamente quando o DOM estiver pronto\n    document.addEventListener('DOMContentLoaded', () => {\n        new FormValidator();\n    });\n}\n\nexport default FormValidator;\n"],"names":["FormValidator","constructor","options","this","settings","formSelector","errorClass","validClass","errorElement","forms","document","readyState","addEventListener","init","querySelectorAll","length","forEach","form","initFormValidation","console","warn","jQuery","fn","validate","$form","errorPlacement","error","element","$field","closest","append","after","highlight","$element","addClass","removeClass","unhighlight","submitHandler","handleFormSubmit","setupRealTimeValidation","push","on","$submitButton","find","originalText","html","prop","submit","setTimeout","window"],"sourceRoot":""}